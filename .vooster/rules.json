{
  "rules": [
    {
      "type": "prd",
      "content": "# 제품 요구사항 문서(PRD)\n\n## 1. 개요\n“가족 구성원을 연결해주는 정서 기반 복지 플랫폼”(이하 ‘FamilyLink’)은 바쁜 현대인들이 가족 간 정서적 유대감을 자연스럽게 강화하고, 감정 상태에 맞는 맞춤 복지 서비스를 제공하는 모바일 앱 서비스이다.\n\n핵심 가치  \n1) 매일 작은 대화로 소통 습관 형성  \n2) 가족 미션·성향 분석을 통한 관계 개선  \n3) 감정 데이터 기반 복지 혜택 자동 추천\n\n## 2. 문제 정의\n• 맞벌이·학업 등으로 대면 대화가 부족해 가족 유대감이 약화  \n• 감정 표현이 어색해 갈등이 장기화, 정신 건강 악화  \n• 기존 복지 정보는 산발적·일방향적 제공으로 실사용률 저조\n\n## 3. 목표 및 목적\n- 1차 목표: 가족 소통 빈도 주 4회 이상, 3개월 내 DAU 30% 달성  \n- 2차 목표: 정서 개선(우울/불안 점수 10%↓), 미션 완료율 60%  \n성공 지표: 일일 질문 응답률, 미션 참여율, 복지 서비스 클릭률, NPS ≥ 60\n\n## 4. 타깃 사용자\nPrimary  \n- 30~50대 맞벌이 부모: 자녀와 소통 갈증, 복지 정보 탐색 욕구  \n- 13~19세 청소년: 문자보다 쉬운 감정 표현, 부모 관심 필요  \n\nSecondary  \n- 20~30대 성인 자녀, 조부모, 지자체 복지 담당자\n\n## 5. 사용자 스토리\n- 부모로서, 자녀의 하루 감정을 한눈에 보고 적절히 반응하고 싶다.  \n- 청소년으로서, 짧은 이모티콘으로 내 기분을 편하게 공유하고 싶다.  \n- 가족 모두, 주말에 함께할 미션을 앱이 추천해 주길 바란다.  \n- 부모로서, 자녀 스트레스 신호가 뜨면 상담·교육 프로그램을 바로 신청하고 싶다.\n\n## 6. 기능 요구사항\n### 핵심 기능\n1. 가족 연결  \n   - 부모·자녀 역할 선택 후 암호화 코드로 연동  \n   - AC: 연결 성공 시 두 계정 모두 ‘가족 홈’ 접근 가능\n\n2. 랜덤 질문 & 답변  \n   - 일일 1개의 질문 푸시, 텍스트·이모티콘 응답  \n   - AC: 24시간 내 미응답 시 리마인더 발송\n\n3. 감정 일기  \n   - 버튼(즐거움, 슬픔 등) 선택 후 선택적 텍스트 입력  \n   - AC: 감정 선택 필수, 텍스트 옵션, 하루 1회 제한\n\n4. 주간 미션 카드  \n   - 시스템/AI가 가족 유형별 3가지 미션 제안  \n   - 인증 사진 업로드 시 자동 레벨·뱃지 지급  \n   - AC: 완료 시점에 리워드 룰렛 팝업 노출\n\n5. 성향·궁합 테스트  \n   - MBTI+Big5 간략 버전, 갈등 대응 팁 서빙  \n   - AC: 테스트 완료 시 가족 피드에 결과 카드 표시\n\n6. 맞춤 복지 추천  \n   - 감정·키워드 NLP 분석 → 지역·연령 필터링 → 서비스 카드 제공  \n   - AC: ‘복지 바로가기’ 클릭 시 제휴 페이지 딥링크\n\n### 보조 기능\n7. 추억 타임라인  \n   - 모든 활동 자동 아카이빙, ‘작년 오늘’ 회고 알림  \n8. 익명 이야기함  \n   - 작성자 익명표시, 수신자는 읽음 확인만 가능  \n   - 예약 발송, 답장 유도 버튼 제공\n\n## 7. 비기능 요구사항\n- 성능: 평균 응답 1초 이내, 푸시 지연 <5초  \n- 보안: OAuth2, 데이터 AES-256 저장, GDPR/KISA 준수  \n- 접근성: 글꼴 크기 조절, 음성 읽기 옵션  \n- 확장성: 월간 100만 MAU 기준 2배 스케일 아웃 가능  \n- 호환: iOS 13+, Android 8.0+ / 웹뷰 일부\n\n## 8. 기술 고려사항\n- Front: Flutter 3.x, Provider/Bloc 상태관리  \n- Back: Spring Boot 3.x, REST API, JWT 인증  \n- AI: AWS Comprehend for 감정 NLP, SageMaker CF 추천  \n- DB: RDS(MySQL) + DynamoDB(이벤트 로그)  \n- Infra: AWS ECS Fargate, S3 이미지 저장, CloudFront CDN  \n- 3rd Party: Firebase Push, Twilio SMS, 공공복지 API 연동\n\n## 9. 성공 지표\n- 사용자: DAU/MAU ≥ 30%, 일일 응답률 50%  \n- 비즈니스: 제휴 복지 서비스 전환율 15%, 월 구독 해지율 <5%  \n- 기술: 서버 가동률 99.9%, 크래시율 <0.3%\n\n## 10. 일정/마일스톤\n| 단계 | 기간 | 주요 산출물 |\n|---|---|---|\n| 기획 고도화 | M0~M1 | 요건 확정, UX 플로우 |\n| MVP 개발 | M1~M3 | 가족 연결, 질문·일기, 기본 미션 |\n| 베타 테스트 | M3~M4 | 500가구, 피드백 리포트 |\n| v1.0 런칭 | M4 | 복지 추천, 성향 테스트 |\n| v1.1 | M5~M6 | 타임라인, 익명 이야기함 |\n| v2.0 | M7~M9 | AI 개인화 고도화, 해외 로컬라이징 |\n\n## 11. 리스크 및 대응\n- 데이터 민감도: 가족 감정 정보 유출 위험 → E2E 암호화, 최소 권한 설계  \n- 초기 참여 저조: 게임화·리워드 강화, 학교·기업 제휴 온보딩  \n- 복지 API 변동: 표준화 래퍼 모듈, 24시간 헬스체크  \n\n## 12. 향후 계획\n- 음성 감정 분석, AR 추억 앨범  \n- 커플·친구 모드 확장 → 관계 플랫폼화  \n- 보험·헬스케어 제휴로 수익 다각화",
      "writedAt": "2025-08-01T05:48:25.682Z"
    },
    {
      "type": "design-guide",
      "content": "# FamilyLink Design Guide\n\n## 1. Overall Mood (전체적인 무드)\nFamilyLink는 **친근하고 따뜻한(Friendly and Warm)** 컨셉으로 설계되었습니다. 가족이라는 따뜻한 관계를 중심으로, 13세부터 50대까지 다양한 연령대가 편안하게 사용할 수 있는 포근한 디지털 공간을 제공합니다. 마치 집에 온 듯한 편안함과 자연스러운 소통이 이어질 수 있도록 부드러운 색상과 둥근 모서리를 활용한 디자인으로 구성됩니다.\n\n## 2. Reference Service (참조 서비스)\n- **Name**: Forest\n- **Description**: 집중력 향상을 위한 앱으로 나무를 키우며 성취감과 따뜻함을 제공하는 서비스\n- **Design Mood**: 자연친화적이고 따뜻한 디자인 무드로 성장과 발전의 느낌을 자연스럽게 전달\n- **Primary Color**: #68B684 (따뜻한 그린)\n- **Secondary Color**: #F4A460 (부드러운 오렌지)\n\n## 3. Color & Gradient (색상 & 그라데이션)\n전체적으로 **따뜻한 톤(Warm tone)에 중간 정도의 채도(Medium saturation)**를 사용합니다.\n\n- **Primary Color**: #68B684 (따뜻한 그린) - 자연스럽고 안정적인 성장의 의미\n- **Secondary Color**: #F4A460 (부드러운 오렌지) - 따뜻함과 활기를 주는 포인트 컬러\n- **Accent Color**: #FFE4B5 (연한 복숭아) - 부드러운 강조 및 배경용\n- **Grayscale**: #2D3748 (진한 그레이), #718096 (중간 그레이), #E2E8F0 (연한 그레이)\n- **Mood**: 따뜻한 톤(Warm), 중간 채도(Medium Saturation)\n\n**Color Usage**:\n- **Primary Color**: 주요 CTA 버튼, 네비게이션, 중요한 액션 요소\n- **Secondary Color**: 알림, 성공 메시지, 미션 완료 표시, 감정 표현 버튼\n- **Accent Color**: 배경, 카드 영역, 부드러운 구분선\n- **Grayscale**: 텍스트, 아이콘, 보조 정보\n\n## 4. Typography & Font (타이포그래피 & 폰트)\n가독성과 친근함을 동시에 고려한 타이포그래피 시스템입니다.\n\n- **Heading 1**: Pretendard Bold, 24px, Letter-spacing: -0.5px\n- **Heading 2**: Pretendard SemiBold, 20px, Letter-spacing: -0.3px\n- **Heading 3**: Pretendard Medium, 18px, Letter-spacing: -0.2px\n- **Body**: Pretendard Regular, 16px, Line-height: 1.5, Letter-spacing: -0.1px\n- **Caption**: Pretendard Regular, 14px, Line-height: 1.4\n- **Button Text**: Pretendard SemiBold, 16px, Letter-spacing: -0.2px\n\n## 5. Layout & Structure (레이아웃 & 구조)\n- **Grid System**: 16px 기본 패딩, 8px 단위 간격 시스템\n- **Card Design**: 12px 라운드 코너, 부드러운 그림자 적용\n- **Safe Area**: 상하 24px, 좌우 16px 여백 확보\n- **Component Spacing**: 8px, 16px, 24px, 32px 단위로 일관성 유지\n- **Responsive**: 다양한 화면 크기에 대응하는 유연한 레이아웃\n\n## 6. Visual Style (비주얼 스타일)\n- **Icons**: 둥근 모서리의 친근한 라인 아이콘, 2px 스트로크\n- **Illustrations**: 부드럽고 따뜻한 느낌의 플랫 일러스트레이션\n- **Images**: 자연스러운 둥근 모서리 적용 (8px radius)\n- **Shadows**: 부드러운 그림자로 깊이감 표현 (0px 2px 8px rgba(0,0,0,0.1))\n- **Animations**: 자연스러운 이징(ease-in-out)으로 부드러운 전환 효과\n\n## 7. UX Guide (UX 가이드)\n**전문가와 초보자 모두를 고려한 이중 접근 전략**\n\n**전문가를 위한 핵심 기능 집중**:\n- 메인 화면에서 모든 중요 정보 한 눈에 파악 가능\n- 원터치 감정 입력, 빠른 미션 체크 기능\n- 최소 클릭으로 원하는 기능 접근 (2-3 탭 이내)\n- 스와이프, 롱프레스 등 제스처 활용\n\n**초보자를 위한 친근한 안내**:\n- 온보딩: \"가족과 함께 시작하는 첫 걸음\" 컨셉의 단계별 가이드\n- 친근한 언어: \"오늘 기분은 어떠세요?\", \"가족에게 마음을 전해보세요\"\n- 명확한 안내: 버튼과 액션에 대한 구체적 설명 제공\n- 튜토리얼: 언제든 다시 볼 수 있는 도움말 섹션\n- 에러 처리: \"괜찮아요, 다시 시도해볼까요?\" 같은 격려 메시지\n\n## 8. UI Component Guide (UI 컴포넌트 가이드)\n\n**Buttons**:\n- Primary Button: #68B684 배경, 흰색 텍스트, 12px 라운드, 48px 높이\n- Secondary Button: 투명 배경, #68B684 텍스트, 2px 보더, 12px 라운드\n- Floating Action Button: #F4A460 배경, 56px 원형, 부드러운 그림자\n\n**Input Fields**:\n- 기본: 연한 그레이 배경, #68B684 포커스 보더, 8px 라운드\n- 에러: #FF6B6B 보더, 부드러운 에러 메시지\n- 성공: #68B684 보더, 체크 아이콘 표시\n\n**Cards**:\n- 가족 카드: 흰색 배경, 12px 라운드, 부드러운 그림자\n- 미션 카드: #FFE4B5 배경, 활기찬 일러스트레이션 포함\n- 감정 카드: 감정별 컬러 시스템, 이모티콘과 텍스트 조합\n\n**Navigation**:\n- Bottom Tab: 아이콘 + 텍스트, 선택 시 #68B684 컬러\n- Header: 심플한 타이틀 + 액션 버튼, 투명 배경\n- 브레드크럼: 현재 위치를 자연스럽게 안내\n\n이 디자인 가이드를 통해 FamilyLink가 가족들에게 따뜻하고 편안한 소통 공간이 되기를 바랍니다! 🌿💚",
      "writedAt": "2025-08-01T05:48:25.683Z"
    },
    {
      "type": "step-by-step",
      "content": "\n## Core Directive\nYou are a senior software engineer AI assistant. For EVERY task request, you MUST follow the three-phase process below in exact order. Each phase must be completed with expert-level precision and detail.\n\n## Guiding Principles\n- **Minimalistic Approach**: Implement high-quality, clean solutions while avoiding unnecessary complexity\n- **Expert-Level Standards**: Every output must meet professional software engineering standards\n- **Concrete Results**: Provide specific, actionable details at each step\n\n---\n\n## Phase 1: Codebase Exploration & Analysis\n**REQUIRED ACTIONS:**\n1. **Systematic File Discovery**\n   - List ALL potentially relevant files, directories, and modules\n   - Search for related keywords, functions, classes, and patterns\n   - Examine each identified file thoroughly\n\n2. **Convention & Style Analysis**\n   - Document coding conventions (naming, formatting, architecture patterns)\n   - Identify existing code style guidelines\n   - Note framework/library usage patterns\n   - Catalog error handling approaches\n\n**OUTPUT FORMAT:**\n```\n### Codebase Analysis Results\n**Relevant Files Found:**\n- [file_path]: [brief description of relevance]\n\n**Code Conventions Identified:**\n- Naming: [convention details]\n- Architecture: [pattern details]\n- Styling: [format details]\n\n**Key Dependencies & Patterns:**\n- [library/framework]: [usage pattern]\n```\n\n---\n\n## Phase 2: Implementation Planning\n**REQUIRED ACTIONS:**\nBased on Phase 1 findings, create a detailed implementation roadmap.\n\n**OUTPUT FORMAT:**\n```markdown\n## Implementation Plan\n\n### Module: [Module Name]\n**Summary:** [1-2 sentence description of what needs to be implemented]\n\n**Tasks:**\n- [ ] [Specific implementation task]\n- [ ] [Specific implementation task]\n\n**Acceptance Criteria:**\n- [ ] [Measurable success criterion]\n- [ ] [Measurable success criterion]\n- [ ] [Performance/quality requirement]\n\n### Module: [Next Module Name]\n[Repeat structure above]\n```\n\n---\n\n## Phase 3: Implementation Execution\n**REQUIRED ACTIONS:**\n1. Implement each module following the plan from Phase 2\n2. Verify ALL acceptance criteria are met before proceeding\n3. Ensure code adheres to conventions identified in Phase 1\n\n**QUALITY GATES:**\n- [ ] All acceptance criteria validated\n- [ ] Code follows established conventions\n- [ ] Minimalistic approach maintained\n- [ ] Expert-level implementation standards met\n\n---\n\n## Success Validation\nBefore completing any task, confirm:\n- ✅ All three phases completed sequentially\n- ✅ Each phase output meets specified format requirements\n- ✅ Implementation satisfies all acceptance criteria\n- ✅ Code quality meets professional standards\n\n## Response Structure\nAlways structure your response as:\n1. **Phase 1 Results**: [Codebase analysis findings]\n2. **Phase 2 Plan**: [Implementation roadmap]  \n3. **Phase 3 Implementation**: [Actual code with validation]\n",
      "writedAt": "2025-08-01T05:48:25.683Z"
    },
    {
      "type": "clean-code",
      "content": "\n# Clean Code Guidelines\n\nYou are an expert software engineer focused on writing clean, maintainable code. Follow these principles rigorously:\n\n## Core Principles\n- **DRY** - Eliminate duplication ruthlessly\n- **KISS** - Simplest solution that works\n- **YAGNI** - Build only what's needed now\n- **SOLID** - Apply all five principles consistently\n- **Boy Scout Rule** - Leave code cleaner than found\n\n## Naming Conventions\n- Use **intention-revealing** names\n- Avoid abbreviations except well-known ones (e.g., URL, API)\n- Classes: **nouns**, Methods: **verbs**, Booleans: **is/has/can** prefix\n- Constants: UPPER_SNAKE_CASE\n- No magic numbers - use named constants\n\n## Functions & Methods\n- **Single Responsibility** - one reason to change\n- Maximum 20 lines (prefer under 10)\n- Maximum 3 parameters (use objects for more)\n- No side effects in pure functions\n- Early returns over nested conditions\n\n## Code Structure\n- **Cyclomatic complexity** < 10\n- Maximum nesting depth: 3 levels\n- Organize by feature, not by type\n- Dependencies point inward (Clean Architecture)\n- Interfaces over implementations\n\n## Comments & Documentation\n- Code should be self-documenting\n- Comments explain **why**, not what\n- Update comments with code changes\n- Delete commented-out code immediately\n- Document public APIs thoroughly\n\n## Error Handling\n- Fail fast with clear messages\n- Use exceptions over error codes\n- Handle errors at appropriate levels\n- Never catch generic exceptions\n- Log errors with context\n\n## Testing\n- **TDD** when possible\n- Test behavior, not implementation\n- One assertion per test\n- Descriptive test names: `should_X_when_Y`\n- **AAA pattern**: Arrange, Act, Assert\n- Maintain test coverage > 80%\n\n## Performance & Optimization\n- Profile before optimizing\n- Optimize algorithms before micro-optimizations\n- Cache expensive operations\n- Lazy load when appropriate\n- Avoid premature optimization\n\n## Security\n- Never trust user input\n- Sanitize all inputs\n- Use parameterized queries\n- Follow **principle of least privilege**\n- Keep dependencies updated\n- No secrets in code\n\n## Version Control\n- Atomic commits - one logical change\n- Imperative mood commit messages\n- Reference issue numbers\n- Branch names: `type/description`\n- Rebase feature branches before merging\n\n## Code Reviews\n- Review for correctness first\n- Check edge cases\n- Verify naming clarity\n- Ensure consistent style\n- Suggest improvements constructively\n\n## Refactoring Triggers\n- Duplicate code (Rule of Three)\n- Long methods/classes\n- Feature envy\n- Data clumps\n- Divergent change\n- Shotgun surgery\n\n## Final Checklist\nBefore committing, ensure:\n- [ ] All tests pass\n- [ ] No linting errors\n- [ ] No console logs\n- [ ] No commented code\n- [ ] No TODOs without tickets\n- [ ] Performance acceptable\n- [ ] Security considered\n- [ ] Documentation updated\n\nRemember: **Clean code reads like well-written prose**. Optimize for readability and maintainability over cleverness.\n",
      "writedAt": "2025-08-01T05:48:25.683Z"
    }
  ]
}